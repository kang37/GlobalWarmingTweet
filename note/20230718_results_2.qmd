---
title: "Results"
author: "Kang"
format: html
editor: visual
---

## 描述性结果

每日每十万用户发文数图如下。每日每万用户发文数 = 每日推文总数 / 当年用户总数。

```{r}
tar_load(general_plot_dt)
ggplot(general_plot_dt) + 
  geom_line(aes(date, tw_int)) + 
  labs(x = "Date", y = "Tweet number per 100 thousand users")
```

## 峰值事件识别

方法和原本类似，不同的仅在第一步。现在的方法简述如下。

（1）在每一年每天推文数基础上，结合每年的用户总数，计算每天每用户推文数（即每天推文数除以当年用户总数）。**将数据按照年份分成10份**，对于每年的数据，在每天每用户推文数基础上，计算出每年的高值线（如90分位数）。

（2）大于该高值线的日期称为高值日期。

（3）若高值日期连续天数大于等于3天，则称为一个事件。

分析结果和原本相同，原因是判断高值日期的标准是分位数，分位数原本的基于每年子数据集中的每日推文总数计算的，而现在是基于每年子数据集中的每日推文强度计算的。每日推文强度的计算方法，如上文所说，是每天推文数除以当年用户总数，而对于每个年份的子数据集，只有一个"当年用户总数"。所以虽然分位数的绝对值变化了，越过高值线的日期却不会变化。

取90分位数的情况，峰值事件如下。

```{r}
tw_high_90 %>% 
  mutate(
    day = day(date),
    date_dummy = as.Date(paste("9999", month, day, sep = "-"))
  ) %>% 
  ggplot() + 
  geom_tile(aes(date_dummy, 1), fill = "darkred") + 
  theme_bw() +
  theme(
    axis.ticks.x = element_blank(),
    axis.ticks.y = element_blank(),
    axis.text.y = element_blank(), 
    panel.grid = element_blank()
  ) +
  scale_x_date(date_labels = "%b") + 
  labs(x = "Date", y = "") + 
  facet_wrap(.~ year, ncol = 1, strip.position = "right")

tw_high_90 %>% 
  select(year, grp) %>% 
  distinct() %>% 
  group_by(year) %>% 
  summarise(peak_num = n()) %>% 
  ungroup() %>% 
  knitr::kable()
```

取85分位数的情况，峰值事件如下。

```{r}
tw_high_85 %>% 
  mutate(
    day = day(date),
    date_dummy = as.Date(paste("9999", month, day, sep = "-"))
  ) %>% 
  ggplot() + 
  geom_tile(aes(date_dummy, 1), fill = "darkred") + 
  theme_bw() +
  theme(
    axis.ticks.x = element_blank(),
    axis.ticks.y = element_blank(),
    axis.text.y = element_blank(), 
    panel.grid = element_blank()
  ) +
  scale_x_date(date_labels = "%b") + 
  labs(x = "Date", y = "") + 
  facet_wrap(.~ year, ncol = 1, strip.position = "right")

tw_high_85 %>% 
  select(year, grp) %>% 
  distinct() %>% 
  group_by(year) %>% 
  summarise(peak_num = n()) %>% 
  ungroup() %>% 
  knitr::kable()
```

## 峰值事件分析

分析对象是两个事件："大米"（rice），"酷暑"（hot）。首先计算了两个事件中所有用户的（节点）的中心度，包括度量中心度（Degree centrality）、中介中心度（Betweenness centrality）。中心度计算以被转推者为核心，比如说一个用户被10个人转推了，那么它的度量中心度就是10。

其中，大米事件的前10位度量中心度高值用户如下。

```{r}
graph_cen[["rice"]] %>% 
  arrange(-cen_degree) %>% 
  select(retweeted_userid = name, retweeted_username = author_username, cen_degree) %>% 
  head(10) %>% 
  knitr::kable()
```

大米事件中介中心度前10位如下。

```{r}
graph_cen[["rice"]] %>% 
  arrange(-cen_between) %>% 
  select(retweeted_userid = name, retweeted_username = author_username, cen_between) %>% 
  head(10) %>% 
  knitr::kable()
```

酷暑事件度量中心度前10位如下。

```{r}
graph_cen[["hot"]] %>% 
  arrange(-cen_degree) %>% 
  select(retweeted_userid = name, retweeted_username = author_username, cen_degree) %>% 
  head(10) %>% 
  knitr::kable()
```

酷暑事件中介中心度前10位如下。

```{r}
graph_cen[["hot"]] %>% 
  arrange(-cen_between) %>% 
  select(retweeted_userid = name, retweeted_username = author_username, cen_between) %>% 
  head(10) %>% 
  knitr::kable()
```

然后做网络图。由于无法将所有的节点和连接都画出来（非常耗时而且看不清联系），筛选出度量中心度或中介中心度比较高的节点做网络图。community detection采用的方法是\"connected compenents using [igraph::components()](http://127.0.0.1:33663/help/library/igraph/help/components)\"，因为group_louvain()只能用来做无方向连接网络的community detection。两个事件的网络图如下，community以颜色区分，并且展示中心用户在网络中的位置，标签为账户名（就是艾特后面那串）。对于数据库中无对应账户名的，以空标签框表示。

```{r}
net_plot_comm
```

为了方便识别这些中心节点都是些什么用户，随报告附上各个中心节点对应的源头用户相关资料，包括用户的ID、账户名、账户描述、发过的被广为传播的推文内容。
